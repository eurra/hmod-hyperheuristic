
package hmod.hyperheuristic.model.attr.components;

import hmod.hyperheuristic.model.attr.HeuristicStats;
import hmod.hyperheuristic.model.attr.HHAttrSolution;
import hmod.shh.attr.AttrReadingCollection;
import hmod.core.Operator;
import hmod.core.Step;
import hmod.core.AlgorithmException;
import hmod.shh.SHSolutionData;
import hmod.hyperheuristic.model.selection.components.LLStepData;
import hmod.hyperheuristic.model.selection.components.LLStepSetData;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 * Operator related to the attributive memory model.
 * Updates the statistical information of the recently executed heuristic based
 * on the attributive information of the solution generated through it.
 * @author Enrique Urra C.
 */
public class UpdateHeuristicStats implements Operator
{
    private LLStepSetData stepSetHandler;
    private LLStepData stepHandler;
    private SHSolutionData<HHAttrSolution> solutionHandler;
    private SOSelectionData soSelectionHandler;
    
    public void setStepSetHandler(LLStepSetData handler)
    {
        this.stepSetHandler = handler;
    }

    public void setStepData(LLStepData handler)
    {
        this.stepHandler = handler;
    }

    public void setSolutionData(SHSolutionData handler)
    {
        this.solutionHandler = handler;
    }

    public void setSOSelectionHandler(SOSelectionData handler)
    {
        this.soSelectionHandler = handler;
    }

    @Override
    public boolean doOperation() throws AlgorithmException
    {
        // We check if the data has been initialized
        Map<Step, HeuristicStats> stats = soSelectionHandler.getHeuristicStats();
        
        if(stats == null)
        {
            Step[] heuristics = stepSetHandler.getHeuristics();
            stats = new HashMap<>(heuristics.length);
            soSelectionHandler.setHeuristicStats(stats);
            
            for(Step step : heuristics)
                stats.put(step, new HeuristicStats());
        }
        
        // The current heuristic is evaluated according to the change effect 
        // in the solution generated by it before the heuristic execution 
        // (output solution), measured on the solution after the heuristic 
        // execution (input solution). The effect (IR) is measured by the  
        // following rate:
        //      IR = 1 - (Ns / N)
        // where (Ns) is the count of attributes in the output solution that
        // are also present in the input solution, and (N) is the total count of
        // the attributes in the input solution. Therefore, (IR) measures the 
        // change impact generated by the heuristic.
        Step currStep = stepHandler.getCurrentLLStep();        
        HeuristicStats currStats = stats.get(currStep);
        
        // Heuristic without stats (could be the initializer)
        if(currStats == null)
            return true;
        
        HHAttrSolution outputSol = solutionHandler.getAcceptedSolution();
        HHAttrSolution inputSol = solutionHandler.getInputSolution();
        AttrReadingCollection outputAttrs = outputSol.getAttributes();
        AttrReadingCollection inputAttrs = inputSol.getAttributes();
        int attrsOnBoth = 0;
        
        Iterator<String> iterator = inputAttrs.getIterator();

        while(iterator.hasNext())
        {
            if(outputAttrs.hasAttribute(iterator.next()))
                attrsOnBoth++;
        }
        
        double resRate = 1.0 - ((double)attrsOnBoth / (double)inputAttrs.getCount());
        currStats.addChangeImpactReading(resRate);
        
        return true;
    }
}